diff --git a/app/bill/[congress]/[bill_type]/[bill_num]/discussions/[discussion_id]/layout.tsx b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/[discussion_id]/layout.tsx
new file mode 100644
index 0000000..d17cc1d
--- /dev/null
+++ b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/[discussion_id]/layout.tsx
@@ -0,0 +1,34 @@
+import type { Metadata } from "next";
+import { Geist, Geist_Mono } from "next/font/google";
+import "@/app/globals.css";
+
+const geistSans = Geist({
+  variable: "--font-geist-sans",
+  subsets: ["latin"],
+});
+
+const geistMono = Geist_Mono({
+  variable: "--font-geist-mono",
+  subsets: ["latin"],
+});
+
+export const metadata: Metadata = {
+  title: "Discussion",
+  description: "Discussion",
+};
+
+export default function RootLayout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body
+        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
+      >
+        {children}
+      </body>
+    </html>
+  );
+}
diff --git a/app/bill/[congress]/[bill_type]/[bill_num]/discussions/[discussion_id]/page.tsx b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/[discussion_id]/page.tsx
new file mode 100644
index 0000000..f4b5e3e
--- /dev/null
+++ b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/[discussion_id]/page.tsx
@@ -0,0 +1,21 @@
+import NotFoundPage from "@/app/not-found";
+import DiscussionPageComponent from "@/components/DiscussionPageComponent";
+import Footer from "@/components/Footer";
+import Navbar from "@/components/Navbar";
+
+const DiscussionPage = async ({
+  params,
+}: {
+  params: Promise<{ discussion_id: string }>;
+}) => {
+  const { discussion_id } = await params;
+  return (
+    <div className="bg-gray-50 min-h-screen">
+      <Navbar />
+      <DiscussionPageComponent />
+      <Footer />
+    </div>
+  );
+};
+
+export default DiscussionPage;
diff --git a/app/bill/[congress]/[bill_type]/[bill_num]/discussions/new/layout.tsx b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/new/layout.tsx
new file mode 100644
index 0000000..ca98f65
--- /dev/null
+++ b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/new/layout.tsx
@@ -0,0 +1,34 @@
+import type { Metadata } from "next";
+import { Geist, Geist_Mono } from "next/font/google";
+import "@/app/globals.css";
+
+const geistSans = Geist({
+  variable: "--font-geist-sans",
+  subsets: ["latin"],
+});
+
+const geistMono = Geist_Mono({
+  variable: "--font-geist-mono",
+  subsets: ["latin"],
+});
+
+export const metadata: Metadata = {
+  title: "New Discussion",
+  description: "New Discussion",
+};
+
+export default function RootLayout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body
+        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
+      >
+        {children}
+      </body>
+    </html>
+  );
+}
diff --git a/app/bill/[congress]/[bill_type]/[bill_num]/discussions/new/page.tsx b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/new/page.tsx
new file mode 100644
index 0000000..6d1127e
--- /dev/null
+++ b/app/bill/[congress]/[bill_type]/[bill_num]/discussions/new/page.tsx
@@ -0,0 +1,38 @@
+import NotFoundPage from "@/app/not-found";
+import Footer from "@/components/Footer";
+import Navbar from "@/components/Navbar";
+import NewDiscussionComponent from "@/components/NewDiscussionComponent";
+import { getBillTitle } from "@/lib/fetchers/fetchBill";
+
+const NewDiscussionPage = async ({
+  params,
+  searchParams,
+}: {
+  params: Promise<{ congress: string; bill_type: string; bill_num: string }>;
+  searchParams: Promise<{ exists: string }>;
+}) => {
+  const { congress, bill_type, bill_num } = await params;
+  const { exists } = await searchParams;
+  const billTitle = await getBillTitle(
+    parseInt(congress),
+    bill_type,
+    parseInt(bill_num)
+  );
+  if (!billTitle || exists !== "true") {
+    return <NotFoundPage />;
+  }
+  return (
+    <div className="bg-gray-50 min-h-screen">
+      <Navbar />
+      <NewDiscussionComponent
+        congress={parseInt(congress)}
+        billType={bill_type}
+        billNumber={parseInt(bill_num)}
+        billTitle={billTitle}
+      />
+      <Footer />
+    </div>
+  );
+};
+
+export default NewDiscussionPage;
diff --git a/app/bill/[congress]/[bill_type]/[bill_num]/layout.tsx b/app/bill/[congress]/[bill_type]/[bill_num]/layout.tsx
index 5324c81..4b69114 100644
--- a/app/bill/[congress]/[bill_type]/[bill_num]/layout.tsx
+++ b/app/bill/[congress]/[bill_type]/[bill_num]/layout.tsx
@@ -13,11 +13,6 @@ const geistMono = Geist_Mono({
   subsets: ["latin"],
 });
 
-// export const metadata: Metadata = {
-//   title: "Bill Repo",
-//   description: "Bill Repo",
-// };
-
 export const generateMetadata = async ({
   params,
 }: {
diff --git a/app/bill/[congress]/[bill_type]/[bill_num]/page.tsx b/app/bill/[congress]/[bill_type]/[bill_num]/page.tsx
index 6320bcc..dd61d69 100644
--- a/app/bill/[congress]/[bill_type]/[bill_num]/page.tsx
+++ b/app/bill/[congress]/[bill_type]/[bill_num]/page.tsx
@@ -14,11 +14,16 @@ const BillPage = async ({
     bill_type,
     parseInt(bill_num)
   );
+  console.log(billData);
   if (!billData) {
     return <NotFoundPage />;
   }
   return (
-    <BillPageComponent billData={billData} discussions={[]} stats={billStats} />
+    <BillPageComponent
+      billData={billData}
+      discussions={discussions}
+      stats={billStats}
+    />
   );
 };
 
diff --git a/app/bill/[congress]/[bill_type]/layout.tsx b/app/bill/[congress]/[bill_type]/layout.tsx
index fc89f28..a3cb146 100644
--- a/app/bill/[congress]/[bill_type]/layout.tsx
+++ b/app/bill/[congress]/[bill_type]/layout.tsx
@@ -13,11 +13,6 @@ const geistMono = Geist_Mono({
   subsets: ["latin"],
 });
 
-// export const metadata: Metadata = {
-//   title: "Bills by Type",
-//   description: "Bills by Type",
-// };
-
 export const generateMetadata = async ({
   params,
 }: {
diff --git a/app/bill/[congress]/layout.tsx b/app/bill/[congress]/layout.tsx
index 09baf95..90d7b1f 100644
--- a/app/bill/[congress]/layout.tsx
+++ b/app/bill/[congress]/layout.tsx
@@ -13,11 +13,6 @@ const geistMono = Geist_Mono({
   subsets: ["latin"],
 });
 
-// export const metadata: Metadata = {
-//   title: "Bills by Congress",
-//   description: "Bills by Congress",
-// };
-
 export const generateMetadata = async ({
   params,
 }: {
diff --git a/components/ActionsTab.tsx b/components/ActionsTab.tsx
index 777de39..37ecbd8 100644
--- a/components/ActionsTab.tsx
+++ b/components/ActionsTab.tsx
@@ -1,5 +1,5 @@
 import { List } from "lucide-react";
-import { getActionTypeAlias } from "@/lib/utils";
+import { getActionTypeAlias, formatDate } from "@/lib/utils";
 
 export interface Action {
   type: string;
@@ -35,7 +35,7 @@ const ActionTypeBadge = ({ type }: { type: string }) => {
 const ActionsTab = ({ actions }: { actions: Action[] }) => {
   if (actions.length === 0) {
     return (
-      <div className="p-4 md:p-6 lg:p-8 min-h-[600px] flex items-center justify-center">
+      <div className="p-4 md:p-6 lg:p-8 min-h-[600px]">
         <h2 className="text-xl font-semibold text-gray-800 mb-4">Actions</h2>
         <p className="text-gray-600">No actions found for this bill.</p>
       </div>
@@ -57,7 +57,7 @@ const ActionsTab = ({ actions }: { actions: Action[] }) => {
               <div className="flex items-center justify-between mb-2">
                 <ActionTypeBadge type={action.type} />
                 <time className="text-sm font-normal text-gray-500">
-                  {action.date}
+                  {formatDate(action.date)}
                 </time>
               </div>
               <p className="text-base font-normal text-gray-600">
diff --git a/components/AmendmentsTab.tsx b/components/AmendmentsTab.tsx
index ce6778d..4531777 100644
--- a/components/AmendmentsTab.tsx
+++ b/components/AmendmentsTab.tsx
@@ -1,3 +1,5 @@
+import { formatDate } from "@/lib/utils";
+
 export interface Amendment {
   number: string;
   description: string;
@@ -13,7 +15,7 @@ export interface Amendment {
 const AmendmentsTab = ({ amendments }: { amendments: Amendment[] }) => {
   if (amendments.length === 0) {
     return (
-      <div className="p-4 md:p-6 lg:p-8 min-h-[600px] flex items-center justify-center">
+      <div className="p-4 md:p-6 lg:p-8 min-h-[600px]">
         <h2 className="text-xl font-semibold text-gray-800 mb-4">Amendments</h2>
         <p className="text-gray-600">No amendments found for this bill.</p>
       </div>
@@ -35,7 +37,9 @@ const AmendmentsTab = ({ amendments }: { amendments: Amendment[] }) => {
                   {amendment.description}
                 </h3>
               </div>
-              <span className="text-sm text-gray-500">{amendment.date}</span>
+              <span className="text-sm text-gray-500">
+                {formatDate(amendment.date)}
+              </span>
             </div>
             <p className="mt-2 text-sm text-gray-600">
               <strong>Purpose:</strong>{" "}
@@ -44,7 +48,7 @@ const AmendmentsTab = ({ amendments }: { amendments: Amendment[] }) => {
             {amendment.latestAction.text && amendment.latestAction.date && (
               <p className="mt-3 text-xs text-gray-500 border-t pt-2">
                 <strong>Latest Action:</strong> {amendment.latestAction.text} (
-                {amendment.latestAction.date})
+                {formatDate(amendment.latestAction.date)})
               </p>
             )}
           </div>
diff --git a/components/BillComponent.tsx b/components/BillComponent.tsx
index a20725e..e5d5f30 100644
--- a/components/BillComponent.tsx
+++ b/components/BillComponent.tsx
@@ -1,3 +1,9 @@
+"use client";
+
+import Link from "next/link";
+
+import { formatDate } from "@/lib/utils";
+
 export interface BillData {
   title: string;
   congress: number;
@@ -11,14 +17,18 @@ export interface BillData {
 
 const BillComponent = ({ bill }: { bill: BillData }) => (
   <div className="border border-gray-200 rounded-lg p-4">
-    <h3 className="text-lg font-semibold text-gray-800">{bill.title}</h3>
+    <Link href={`/bill/${bill.congress}/${bill.type}/${bill.number}`}>
+      <h3 className="text-lg font-semibold text-gray-800 hover:text-blue-600 cursor-pointer">
+        {bill.title}
+      </h3>
+    </Link>
     <p className="text-sm text-blue-600 font-medium mt-1">
       {bill.congress}th Congress - {bill.type} {bill.number}
     </p>
     {bill.latestAction.text && bill.latestAction.date && (
       <p className="mt-3 text-xs text-gray-500 border-t pt-2">
         <strong>Latest Action:</strong> {bill.latestAction.text} (
-        {bill.latestAction.date})
+        {formatDate(bill.latestAction.date)})
       </p>
     )}
   </div>
diff --git a/components/BillPageComponent.tsx b/components/BillPageComponent.tsx
index 76a6435..ce4d1f4 100644
--- a/components/BillPageComponent.tsx
+++ b/components/BillPageComponent.tsx
@@ -89,7 +89,14 @@ const BillPageComponent = ({
   const renderTabContent = () => {
     switch (activeTab) {
       case "Discussion":
-        return <DiscussionTab discussions={discussions} />;
+        return (
+          <DiscussionTab
+            congress={billData.congress}
+            billType={billData.billType}
+            billNumber={billData.billNumber}
+            discussions={discussions}
+          />
+        );
       case "Actions":
         return <ActionsTab actions={actions} />;
       case "Amendments":
diff --git a/components/BillTab.tsx b/components/BillTab.tsx
index 157fa5e..fbb5cee 100644
--- a/components/BillTab.tsx
+++ b/components/BillTab.tsx
@@ -1,3 +1,5 @@
+import { formatDate } from "@/lib/utils";
+
 export interface BillTabProps {
   summary: string;
   pdfUrl: string;
@@ -63,7 +65,7 @@ const BillTab = ({ summary, pdfUrl, metadata }: BillTabProps) => (
                   {metadata.latestAction.text}
                 </dd>
                 <dd className="mt-1 text-xs text-gray-500">
-                  {metadata.latestAction.date}
+                  {formatDate(metadata.latestAction.date)}
                 </dd>
               </div>
             )}
@@ -78,7 +80,7 @@ const BillTab = ({ summary, pdfUrl, metadata }: BillTabProps) => (
                 Introduction Date
               </dt>
               <dd className="mt-1 text-sm text-gray-900">
-                {metadata.introductionDate}
+                {formatDate(metadata.introductionDate)}
               </dd>
             </div>
           </dl>
diff --git a/components/Discussion.tsx b/components/Discussion.tsx
index 1b4f41a..a8ab304 100644
--- a/components/Discussion.tsx
+++ b/components/Discussion.tsx
@@ -1,4 +1,5 @@
 import { MessageSquare, Clock, MessageCircle } from "lucide-react";
+import Link from "next/link";
 import { getRelativeTime } from "@/lib/utils";
 
 export interface Discussion {
@@ -10,18 +11,29 @@ export interface Discussion {
 }
 
 interface DiscussionTabProps {
+  congress: number;
+  billType: string;
+  billNumber: number;
   discussions: Discussion[];
 }
 
-const DiscussionTab = ({ discussions }: DiscussionTabProps) => {
+const DiscussionTab = ({
+  congress,
+  billType,
+  billNumber,
+  discussions,
+}: DiscussionTabProps) => {
   if (discussions.length === 0) {
     return (
       <div className="p-4 md:p-6 lg:p-8 min-h-[490px]">
         <div className="flex justify-between items-center mb-6">
           <h2 className="text-xl font-semibold text-gray-800">Discussions</h2>
-          <button className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 cursor-pointer">
+          <Link
+            href={`/bill/${congress}/${billType}/${billNumber}/discussions/new?exists=true`}
+            className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 cursor-pointer"
+          >
             New discussion
-          </button>
+          </Link>
         </div>
         <p className="text-gray-600 font-semibold">Start a discussion!</p>
       </div>
@@ -32,9 +44,12 @@ const DiscussionTab = ({ discussions }: DiscussionTabProps) => {
     <div className="p-4 md:p-6 lg:p-8 min-h-[600px]">
       <div className="flex justify-between items-center mb-6">
         <h2 className="text-xl font-semibold text-gray-800">Discussions</h2>
-        <button className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 cursor-pointer">
+        <Link
+          href={`/bill/${congress}/${billType}/${billNumber}/discussions/new?exists=true`}
+          className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 cursor-pointer"
+        >
           New discussion
-        </button>
+        </Link>
       </div>
       <div className="border border-gray-200 rounded-lg">
         {discussions.map((discussion, index) => (
@@ -46,12 +61,12 @@ const DiscussionTab = ({ discussions }: DiscussionTabProps) => {
           >
             <MessageSquare className="w-6 h-6 text-blue-500" />
             <div>
-              <a
-                href="#"
+              <Link
+                href={`/bill/${congress}/${billType}/${billNumber}/discussions/${discussion.id}`}
                 className="font-semibold text-gray-800 hover:text-blue-600"
               >
                 {discussion.title}
-              </a>
+              </Link>
               <div className="flex items-center space-x-4 text-sm text-gray-500">
                 <span>
                   Opened by{" "}
diff --git a/components/DiscussionPageComponent.tsx b/components/DiscussionPageComponent.tsx
new file mode 100644
index 0000000..7601655
--- /dev/null
+++ b/components/DiscussionPageComponent.tsx
@@ -0,0 +1,417 @@
+"use client";
+
+import { Bell, ChevronsRight, Send } from "lucide-react";
+import { useState } from "react";
+import { formatCongress, getBillTypeAlias } from "@/lib/utils";
+import Link from "next/link";
+import ReactMarkdown from "react-markdown";
+
+interface CommentData {
+  id: number;
+  author: string;
+  avatar: string;
+  date: string;
+  body: string;
+}
+
+interface DiscussionData {
+  title: string;
+  author: string;
+  authorAvatar: string;
+  date: string;
+  status: string;
+  bill: {
+    title: string;
+    type: string;
+    number: number;
+    congress: number;
+  };
+  originalPost: {
+    body: string;
+  };
+  comments: CommentData[];
+  participants: {
+    name: string;
+    avatar: string;
+  }[];
+}
+
+const discussionData: DiscussionData = {
+  title: "Clarification on Section 301 funding allocation",
+  author: "civicHacker",
+  authorAvatar: "https://placehold.co/48x48/EBF4FF/7F9CF5?text=C",
+  date: "June 28, 2025",
+  status: "Open",
+  bill: {
+    title: "Infrastructure Investment and Jobs Act",
+    type: "HR",
+    number: 3684,
+    congress: 117,
+  },
+  originalPost: {
+    body: `I've been going through the text of the **Infrastructure Investment and Jobs Act**, specifically Section 301.\n\nIt mentions a large sum allocated to "urban transportation projects." Can anyone clarify if this includes funding for things like:\n\n- Smart traffic light systems?\n- Micromobility infrastructure (e.g., dedicated bike lanes)?\n- Public Wi-Fi on transit systems?\n\nThe language seems a bit vague, and I'm trying to understand the potential impact on modernizing city transit. Any insights or pointers to more specific language would be appreciated.`,
+  },
+  comments: [
+    {
+      id: 1,
+      author: "policyAnalyst22",
+      avatar: "https://placehold.co/40x40/D1FAE5/34D399?text=P",
+      date: "commented on June 28, 2025",
+      body: `Great question, @civicHacker. My reading is that those would likely fall under the discretionary grant programs managed by the Department of Transportation (DOT).\n\nWhile not explicitly named, "smart traffic light systems" would fit under the **SMART grant program** which is funded by this act. I'd recommend looking into the DOT's guidance on that program.`,
+    },
+    {
+      id: 2,
+      author: "transitAdvocate",
+      avatar: "https://placehold.co/40x40/FEF3C7/FBBF24?text=T",
+      date: "commented on June 29, 2025",
+      body: `To add to what @policyAnalyst22 said, the micromobility infrastructure is a bit of a gray area. Some of it could be funded through the **Transportation Alternatives Program (TAP)**, which also gets a boost from this bill.\n\nIt often depends on how state and local agencies decide to prioritize their funding applications.`,
+    },
+    {
+      id: 3,
+      author: "civicHacker",
+      avatar: "https://placehold.co/40x40/EBF4FF/7F9CF5?text=C",
+      date: "commented on June 29, 2025",
+      body: `Thanks both! That's incredibly helpful. The pointers to the SMART and TAP programs are exactly what I was looking for. I'll dig into the DOT's documentation on those.`,
+    },
+  ],
+  participants: [
+    {
+      name: "civicHacker",
+      avatar: "https://placehold.co/40x40/EBF4FF/7F9CF5?text=C",
+    },
+    {
+      name: "policyAnalyst22",
+      avatar: "https://placehold.co/40x40/D1FAE5/34D399?text=P",
+    },
+    {
+      name: "transitAdvocate",
+      avatar: "https://placehold.co/40x40/FEF3C7/FBBF24?text=T",
+    },
+  ],
+};
+
+// Component to render markdown with user mention badges
+const MarkdownWithMentions = ({ content }: { content: string }) => {
+  return (
+    <div className="prose prose-sm max-w-none text-gray-900">
+      <ReactMarkdown
+        components={{
+          // Customize text nodes to handle @mentions
+          text: ({ children }) => {
+            const text = children as string;
+            if (typeof text !== "string") return <>{children}</>;
+
+            // Split text by @mentions while preserving the @ symbol
+            const parts = text.split(/(@\w+)/g);
+
+            return (
+              <>
+                {parts.map((part, index) => {
+                  if (part.match(/^@\w+$/)) {
+                    // This is a mention - render as badge
+                    return (
+                      <span
+                        key={index}
+                        className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mx-0.5"
+                      >
+                        {part}
+                      </span>
+                    );
+                  }
+                  // Regular text
+                  return part;
+                })}
+              </>
+            );
+          },
+          // Customize heading styles
+          h1: ({ children }) => (
+            <h1 className="text-xl font-bold text-gray-900 mb-3">{children}</h1>
+          ),
+          h2: ({ children }) => (
+            <h2 className="text-lg font-semibold text-gray-900 mb-2">
+              {children}
+            </h2>
+          ),
+          h3: ({ children }) => (
+            <h3 className="text-base font-medium text-gray-900 mb-2">
+              {children}
+            </h3>
+          ),
+          // Customize paragraph styles
+          p: ({ children }) => (
+            <p className="text-gray-700 mb-3 leading-relaxed">{children}</p>
+          ),
+          // Customize list styles
+          ul: ({ children }) => (
+            <ul className="list-disc pl-5 mb-3 text-gray-700">{children}</ul>
+          ),
+          ol: ({ children }) => (
+            <ol className="list-decimal pl-5 mb-3 text-gray-700">{children}</ol>
+          ),
+          li: ({ children }) => <li className="mb-1">{children}</li>,
+          // Customize emphasis styles
+          strong: ({ children }) => (
+            <strong className="font-semibold text-gray-900">{children}</strong>
+          ),
+          em: ({ children }) => (
+            <em className="italic text-gray-800">{children}</em>
+          ),
+          // Customize code styles
+          code: ({ children }) => (
+            <code className="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono text-gray-800">
+              {children}
+            </code>
+          ),
+          pre: ({ children }) => (
+            <pre className="bg-gray-100 p-3 rounded-md overflow-x-auto mb-3">
+              {children}
+            </pre>
+          ),
+          // Customize blockquote styles
+          blockquote: ({ children }) => (
+            <blockquote className="border-l-4 border-blue-500 pl-4 italic text-gray-600 mb-3">
+              {children}
+            </blockquote>
+          ),
+        }}
+      >
+        {content}
+      </ReactMarkdown>
+    </div>
+  );
+};
+
+const CommentEditor = ({ avatar }: { avatar: string }) => {
+  const [comment, setComment] = useState("");
+  const [view, setView] = useState("write");
+
+  return (
+    <div className="flex items-start space-x-4">
+      <img
+        className="h-10 w-10 rounded-full bg-white border-2 border-white relative z-10"
+        src={avatar}
+        alt=""
+      />
+      <div className="min-w-0 flex-1 border border-gray-300 rounded-lg">
+        <div className="border-b border-gray-300">
+          <div className="flex -mb-px">
+            <button
+              type="button"
+              onClick={() => setView("write")}
+              className={`w-1/2 py-2 text-sm font-medium text-center ${
+                view === "write"
+                  ? "border-b-2 border-blue-500 text-blue-600"
+                  : "text-gray-500 hover:text-gray-700"
+              }`}
+            >
+              Write
+            </button>
+            <button
+              type="button"
+              onClick={() => setView("preview")}
+              className={`w-1/2 py-2 text-sm font-medium text-center ${
+                view === "preview"
+                  ? "border-b-2 border-blue-500 text-blue-600"
+                  : "text-gray-500 hover:text-gray-700"
+              }`}
+            >
+              Preview
+            </button>
+          </div>
+        </div>
+        <div>
+          <div className={view === "write" ? "block" : "hidden"}>
+            <textarea
+              rows={5}
+              value={comment}
+              onChange={(e) => setComment(e.target.value)}
+              className="block w-full rounded-b-md border-0 focus:ring-0 sm:text-sm p-3 text-gray-500 placeholder:text-gray-500"
+              placeholder="Add to the discussion..."
+            />
+          </div>
+          <div className={view === "preview" ? "block" : "hidden"}>
+            <div className="p-3 min-h-[120px] bg-gray-50 rounded-b-md">
+              {comment ? (
+                <MarkdownWithMentions content={comment} />
+              ) : (
+                <span className="text-gray-500">Nothing to preview</span>
+              )}
+            </div>
+          </div>
+        </div>
+        <div className="border-t border-gray-200 bg-gray-50 px-3 py-2 flex justify-end">
+          <button
+            type="submit"
+            className="inline-flex items-center rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-700"
+          >
+            <Send className="-ml-0.5 mr-1.5 h-5 w-5" />
+            Comment
+          </button>
+        </div>
+      </div>
+    </div>
+  );
+};
+
+const Comment = ({ commentData }: { commentData: CommentData }) => (
+  <div className="flex items-start space-x-4">
+    <img
+      className="h-10 w-10 rounded-full bg-white border-2 border-white relative z-10"
+      src={commentData.avatar}
+      alt={`${commentData.author}'s avatar`}
+    />
+    <div className="min-w-0 flex-1">
+      <div className="border border-gray-300 rounded-lg">
+        <div className="bg-gray-50 px-4 py-2 border-b border-gray-300 rounded-t-lg">
+          <p className="text-sm">
+            <strong className="font-semibold text-gray-900">
+              {commentData.author}
+            </strong>
+            <span className="text-gray-500"> {commentData.date}</span>
+          </p>
+        </div>
+        <div className="p-4 text-gray-700">
+          <MarkdownWithMentions content={commentData.body} />
+        </div>
+      </div>
+    </div>
+  </div>
+);
+
+const DiscussionPageComponent = () => {
+  const {
+    title,
+    author,
+    authorAvatar,
+    date,
+    status,
+    bill,
+    originalPost,
+    comments,
+    participants,
+  } = discussionData;
+
+  return (
+    <main className="flex-grow bg-white py-8 px-4 sm:px-6 lg:px-8">
+      <div className="max-w-7xl mx-auto">
+        {/* Header */}
+        <div className="mb-6">
+          <div className="flex items-center space-x-2 text-sm text-gray-500 mb-2">
+            <Link
+              href={`/bill/${bill.congress}`}
+              className="font-semibold text-blue-600 cursor-pointer"
+            >
+              {formatCongress(bill.congress)}
+            </Link>
+            <ChevronsRight className="w-4 h-4 text-gray-400" />
+            <Link
+              href={`/bill/${bill.congress}/${bill.type}`}
+              className="font-semibold text-blue-600 cursor-pointer"
+            >
+              {getBillTypeAlias(bill.type)}
+            </Link>
+            <ChevronsRight className="w-4 h-4 text-gray-400" />
+            <Link
+              href={`/bill/${bill.congress}/${bill.type}/${bill.number}`}
+              className="font-semibold text-blue-600 cursor-pointer"
+            >
+              {bill.number}
+            </Link>
+            <ChevronsRight className="w-4 h-4 text-gray-400" />
+            <Link
+              href={`/bill/${bill.congress}/${bill.type}/${bill.number}/discussions/new?exists=true`}
+              className="font-semibold text-blue-600 cursor-pointer"
+            >
+              Discussions
+            </Link>
+            <ChevronsRight className="w-4 h-4 text-gray-400" />
+            <span className="font-semibold">{title}</span>
+          </div>
+          <h1 className="text-3xl font-bold text-gray-900 flex items-center">
+            {title}
+          </h1>
+          <div className="flex items-center mt-2">
+            <span
+              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium ${
+                status === "Open"
+                  ? "bg-green-100 text-green-800"
+                  : "bg-red-100 text-red-800"
+              }`}
+            >
+              {status}
+            </span>
+            <p className="ml-4 text-sm text-gray-600">
+              <strong className="font-semibold">{author}</strong> opened this
+              discussion on {date}
+              <span className="mx-1">&middot;</span>
+              {comments.length} comments
+            </p>
+          </div>
+        </div>
+
+        <div className="flex flex-col lg:flex-row lg:space-x-8">
+          {/* Main Content: Discussion Timeline */}
+          <div className="flex-grow min-w-0">
+            <div className="relative">
+              {/* Vertical line for the timeline */}
+              <div
+                className="absolute left-5 top-12 bottom-0 w-0.5 bg-gray-200"
+                aria-hidden="true"
+              ></div>
+
+              <div className="space-y-8">
+                {/* Original Post */}
+                <Comment
+                  commentData={{
+                    ...originalPost,
+                    author,
+                    date: `opened this discussion on ${date}`,
+                    avatar: authorAvatar,
+                    id: 0,
+                  }}
+                />
+                {/* Comments */}
+                {comments.map((comment) => (
+                  <Comment key={comment.id} commentData={comment} />
+                ))}
+                {/* Reply Box */}
+                <CommentEditor avatar="https://placehold.co/40x40/f0f0f0/333?text=Me" />
+              </div>
+            </div>
+          </div>
+
+          {/* Sidebar */}
+          <aside className="w-full lg:w-72 flex-shrink-0 mt-8 lg:mt-0">
+            <div className="sticky top-24 space-y-6">
+              <div>
+                <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wider">
+                  Participants
+                </h3>
+                <div className="mt-2 flex flex-wrap -space-x-2">
+                  {participants.map((p) => (
+                    <img
+                      key={p.name}
+                      className="h-8 w-8 rounded-full border-2 border-white"
+                      src={p.avatar}
+                      alt={p.name}
+                      title={p.name}
+                    />
+                  ))}
+                </div>
+              </div>
+              <div>
+                <button className="w-full inline-flex items-center justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50">
+                  <Bell className="-ml-0.5 mr-1.5 h-5 w-5 text-gray-400" />
+                  Subscribe
+                </button>
+              </div>
+            </div>
+          </aside>
+        </div>
+      </div>
+    </main>
+  );
+};
+
+export default DiscussionPageComponent;
diff --git a/components/NewDiscussionComponent.tsx b/components/NewDiscussionComponent.tsx
new file mode 100644
index 0000000..0a1417d
--- /dev/null
+++ b/components/NewDiscussionComponent.tsx
@@ -0,0 +1,247 @@
+"use client";
+
+import { useState } from "react";
+import { X, Send, HelpCircle } from "lucide-react";
+import Link from "next/link";
+import ReactMarkdown from "react-markdown";
+
+interface NewDiscussionComponentProps {
+  congress: number;
+  billType: string;
+  billNumber: number;
+  billTitle: string;
+}
+
+export const MarkdownPreview = ({ content }: { content: string }) => {
+  return (
+    <div className="prose prose-sm max-w-none text-gray-900">
+      <ReactMarkdown
+        components={{
+          // Customize heading styles
+          h1: ({ children }) => (
+            <h1 className="text-xl font-bold text-gray-900 mb-3">{children}</h1>
+          ),
+          h2: ({ children }) => (
+            <h2 className="text-lg font-semibold text-gray-900 mb-2">
+              {children}
+            </h2>
+          ),
+          h3: ({ children }) => (
+            <h3 className="text-base font-medium text-gray-900 mb-2">
+              {children}
+            </h3>
+          ),
+          // Customize paragraph styles
+          p: ({ children }) => (
+            <p className="text-gray-700 mb-3 leading-relaxed">{children}</p>
+          ),
+          // Customize list styles
+          ul: ({ children }) => (
+            <ul className="list-disc pl-5 mb-3 text-gray-700">{children}</ul>
+          ),
+          ol: ({ children }) => (
+            <ol className="list-decimal pl-5 mb-3 text-gray-700">{children}</ol>
+          ),
+          li: ({ children }) => <li className="mb-1">{children}</li>,
+          // Customize emphasis styles
+          strong: ({ children }) => (
+            <strong className="font-semibold text-gray-900">{children}</strong>
+          ),
+          em: ({ children }) => (
+            <em className="italic text-gray-800">{children}</em>
+          ),
+          // Customize code styles
+          code: ({ children }) => (
+            <code className="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono text-gray-800">
+              {children}
+            </code>
+          ),
+          pre: ({ children }) => (
+            <pre className="bg-gray-100 p-3 rounded-md overflow-x-auto mb-3">
+              {children}
+            </pre>
+          ),
+          // Customize blockquote styles
+          blockquote: ({ children }) => (
+            <blockquote className="border-l-4 border-blue-500 pl-4 italic text-gray-600 mb-3">
+              {children}
+            </blockquote>
+          ),
+        }}
+      >
+        {content}
+      </ReactMarkdown>
+    </div>
+  );
+};
+
+const NewDiscussionComponent = ({
+  congress,
+  billType,
+  billNumber,
+  billTitle,
+}: NewDiscussionComponentProps) => {
+  const [title, setTitle] = useState<string>("");
+  const [comment, setComment] = useState<string>(
+    "## Section 2 Analysis\n\nThis is some **bold text** and this is *italic*.\n\n- Point 1\n- Point 2"
+  );
+  const [view, setView] = useState<"write" | "preview">("write");
+
+  const handleCancel = () => {
+    setComment("");
+    setTitle("");
+    setView("write");
+  };
+
+  return (
+    <main className="flex-grow bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
+      <div className="max-w-4xl mx-auto">
+        <h1 className="text-2xl font-bold text-gray-900">
+          Start a New Discussion
+        </h1>
+        <p className="text-sm text-gray-500 mt-1">
+          for{" "}
+          <Link
+            href={`/bill/${congress}/${billType}/${billNumber}`}
+            className="font-semibold text-blue-600 hover:underline"
+          >
+            {billTitle}
+          </Link>
+        </p>
+
+        <div className="mt-6 flex flex-col md:flex-row gap-8">
+          {/* Main Form Area */}
+          <div className="flex-grow">
+            <form
+              onSubmit={(e) => e.preventDefault()}
+              className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm"
+            >
+              <div>
+                <label
+                  htmlFor="discussion-title"
+                  className="block text-sm font-semibold text-gray-700"
+                >
+                  Title
+                </label>
+                <div className="mt-1">
+                  <input
+                    type="text"
+                    id="discussion-title"
+                    className="block p-2 w-full rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm text-gray-900 placeholder:text-gray-400"
+                    placeholder="e.g., Question about Section 301 funding"
+                    value={title}
+                    onChange={(e) => setTitle(e.target.value)}
+                  />
+                </div>
+              </div>
+
+              <div className="mt-6">
+                <label
+                  htmlFor="comment"
+                  className="block text-sm font-semibold text-gray-700 mb-1"
+                >
+                  Comment
+                </label>
+                <div className="border border-gray-300 rounded-md">
+                  {/* Tabs for all screen sizes */}
+                  <div className="border-b border-gray-300">
+                    <nav className="flex -mb-px">
+                      <button
+                        type="button"
+                        onClick={() => setView("write")}
+                        className={`w-1/2 py-2 text-sm font-medium text-center cursor-pointer ${
+                          view === "write"
+                            ? "border-b-2 border-blue-500 text-blue-600"
+                            : "text-gray-500 hover:text-gray-700"
+                        }`}
+                      >
+                        Write
+                      </button>
+                      <button
+                        type="button"
+                        onClick={() => setView("preview")}
+                        className={`w-1/2 py-2 text-sm font-medium text-center cursor-pointer ${
+                          view === "preview"
+                            ? "border-b-2 border-blue-500 text-blue-600"
+                            : "text-gray-500 hover:text-gray-700"
+                        }`}
+                      >
+                        Preview
+                      </button>
+                    </nav>
+                  </div>
+                  <div>
+                    {/* Write Textarea */}
+                    <div className={view === "write" ? "block" : "hidden"}>
+                      <textarea
+                        rows={12}
+                        id="comment"
+                        className="block w-full rounded-b-md border-0 focus:ring-0 sm:text-sm p-3 text-gray-900 placeholder:text-gray-400"
+                        placeholder="Write your comment here. You can use Markdown for formatting."
+                        value={comment}
+                        onChange={(e) => setComment(e.target.value)}
+                      />
+                    </div>
+                    {/* Preview Pane */}
+                    <div className={view === "preview" ? "block" : "hidden"}>
+                      <div className="p-3 min-h-[288px] bg-gray-50 rounded-b-md">
+                        <MarkdownPreview content={comment} />
+                      </div>
+                    </div>
+                  </div>
+                </div>
+                <p className="mt-2 text-xs text-gray-500">
+                  Styling with Markdown is supported.
+                </p>
+              </div>
+
+              <div className="mt-6 flex justify-end gap-x-3 border-t pt-4">
+                <button
+                  type="button"
+                  className="cursor-pointer inline-flex items-center rounded-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-red-100 hover:text-red-600"
+                  onClick={handleCancel}
+                >
+                  <X className="-ml-0.5 mr-1.5 h-5 w-5" />
+                  Cancel
+                </button>
+                <button
+                  type="submit"
+                  className="cursor-pointer inline-flex items-center rounded-md bg-green-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-700 focus-visible:outline-offset-2 focus-visible:outline-green-600"
+                >
+                  <Send className="-ml-0.5 mr-1.5 h-5 w-5" />
+                  Submit discussion
+                </button>
+              </div>
+            </form>
+          </div>
+
+          {/* Informational Sidebar */}
+          <aside className="w-full md:w-80 flex-shrink-0">
+            <div className="sticky top-24">
+              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
+                <div className="flex items-start">
+                  <HelpCircle className="h-6 w-6 text-blue-600 flex-shrink-0 mt-0.5" />
+                  <div className="ml-3">
+                    <h3 className="text-sm font-semibold text-blue-800">
+                      Discussion Guidelines
+                    </h3>
+                    <ul className="mt-2 list-disc list-inside space-y-1 text-sm text-blue-700">
+                      <li>Stay on topic with the bill.</li>
+                      <li>Be respectful and constructive.</li>
+                      <li>Cite sources when possible.</li>
+                      <li>Avoid hate speech.</li>
+                      <li>Avoid personal attacks.</li>
+                      <li>Keep the conversation productive.</li>
+                    </ul>
+                  </div>
+                </div>
+              </div>
+            </div>
+          </aside>
+        </div>
+      </div>
+    </main>
+  );
+};
+
+export default NewDiscussionComponent;
diff --git a/components/RelatedBillsTab.tsx b/components/RelatedBillsTab.tsx
index f830721..4d04a07 100644
--- a/components/RelatedBillsTab.tsx
+++ b/components/RelatedBillsTab.tsx
@@ -7,7 +7,7 @@ const RelatedBillsTab = ({
 }) => {
   if (relatedBills.length === 0) {
     return (
-      <div className="p-4 md:p-6 lg:p-8 min-h-[600px] flex items-center justify-center">
+      <div className="p-4 md:p-6 lg:p-8 min-h-[600px]">
         <h2 className="text-xl font-semibold text-gray-800 mb-4">
           Related Bills
         </h2>
diff --git a/lib/fetchers/fetchBill.ts b/lib/fetchers/fetchBill.ts
index 2aaa3a7..1d030d7 100644
--- a/lib/fetchers/fetchBill.ts
+++ b/lib/fetchers/fetchBill.ts
@@ -251,3 +251,15 @@ const fetchBillRelatedBills = async (
     })
   );
 };
+
+export const getBillTitle = async (
+  congress: number,
+  bill_type: string,
+  bill_number: number
+): Promise<string> => {
+  const response = await fetchSpecificBill(congress, bill_type, bill_number);
+  if (!response) {
+    throw new Error("Failed to fetch bill title");
+  }
+  return response.title;
+};
diff --git a/lib/utils/index.ts b/lib/utils/index.ts
index 9d0fc51..692b076 100644
--- a/lib/utils/index.ts
+++ b/lib/utils/index.ts
@@ -46,3 +46,12 @@ export const getRelativeTime = (dateString: string) => {
   if (diffDays < 60) return "1 month ago";
   return `${Math.floor(diffDays / 30)} months ago`;
 };
+
+export const formatDate = (dateString: string) => {
+  const date = new Date(dateString);
+  return date.toLocaleDateString("en-US", {
+    month: "long",
+    day: "numeric",
+    year: "numeric",
+  });
+};
diff --git a/package-lock.json b/package-lock.json
index c4acadb..bdd4456 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -12,6 +12,7 @@
         "next": "15.3.4",
         "react": "^19.0.0",
         "react-dom": "^19.0.0",
+        "react-markdown": "^10.1.0",
         "sonner": "^2.0.5"
       },
       "devDependencies": {
@@ -878,6 +879,48 @@
         "tailwindcss": "4.1.11"
       }
     },
+    "node_modules/@types/debug": {
+      "version": "4.1.12",
+      "resolved": "https://registry.npmjs.org/@types/debug/-/debug-4.1.12.tgz",
+      "integrity": "sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==",
+      "dependencies": {
+        "@types/ms": "*"
+      }
+    },
+    "node_modules/@types/estree": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
+      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w=="
+    },
+    "node_modules/@types/estree-jsx": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/@types/estree-jsx/-/estree-jsx-1.0.5.tgz",
+      "integrity": "sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg==",
+      "dependencies": {
+        "@types/estree": "*"
+      }
+    },
+    "node_modules/@types/hast": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@types/hast/-/hast-3.0.4.tgz",
+      "integrity": "sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==",
+      "dependencies": {
+        "@types/unist": "*"
+      }
+    },
+    "node_modules/@types/mdast": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/@types/mdast/-/mdast-4.0.4.tgz",
+      "integrity": "sha512-kGaNbPh1k7AFzgpud/gMdvIm5xuECykRR+JnWKQno9TAXVa6WIVCGTPvYGekIDL4uwCZQSYbUxNBSb1aUo79oA==",
+      "dependencies": {
+        "@types/unist": "*"
+      }
+    },
+    "node_modules/@types/ms": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
+      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA=="
+    },
     "node_modules/@types/node": {
       "version": "20.19.2",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.2.tgz",
@@ -891,7 +934,6 @@
       "version": "19.1.8",
       "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.8.tgz",
       "integrity": "sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==",
-      "dev": true,
       "dependencies": {
         "csstype": "^3.0.2"
       }
@@ -905,6 +947,25 @@
         "@types/react": "^19.0.0"
       }
     },
+    "node_modules/@types/unist": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@types/unist/-/unist-3.0.3.tgz",
+      "integrity": "sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q=="
+    },
+    "node_modules/@ungap/structured-clone": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
+      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g=="
+    },
+    "node_modules/bail": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/bail/-/bail-2.0.2.tgz",
+      "integrity": "sha512-0xO6mYd7JB2YesxDKplafRpsiOzPt9V02ddPCLbY1xYGPOX24NTyN50qnUxgCPcSoYMhKpAuBTjQoRZCAkUDRw==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/busboy": {
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
@@ -935,6 +996,51 @@
         }
       ]
     },
+    "node_modules/ccount": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/ccount/-/ccount-2.0.1.tgz",
+      "integrity": "sha512-eyrF0jiFpY+3drT6383f1qhkbGsLSifNAjA61IUjZjmLCWjItY6LB9ft9YhoDgwfmclB2zhu51Lc7+95b8NRAg==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/character-entities": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/character-entities/-/character-entities-2.0.2.tgz",
+      "integrity": "sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/character-entities-html4": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/character-entities-html4/-/character-entities-html4-2.1.0.tgz",
+      "integrity": "sha512-1v7fgQRj6hnSwFpq1Eu0ynr/CDEw0rXo2B61qXrLNdHZmPKgb7fqS1a2JwF0rISo9q77jDI8VMEHoApn8qDoZA==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/character-entities-legacy": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/character-entities-legacy/-/character-entities-legacy-3.0.0.tgz",
+      "integrity": "sha512-RpPp0asT/6ufRm//AJVwpViZbGM/MkjQFxJccQRHmISF/22NBtsHqAWmL+/pmkPWoIUJdWyeVleTl1wydHATVQ==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/character-reference-invalid": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/character-reference-invalid/-/character-reference-invalid-2.0.1.tgz",
+      "integrity": "sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/chownr": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
@@ -990,11 +1096,55 @@
         "simple-swizzle": "^0.2.2"
       }
     },
+    "node_modules/comma-separated-tokens": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/comma-separated-tokens/-/comma-separated-tokens-2.0.3.tgz",
+      "integrity": "sha512-Fu4hJdvzeylCfQPp9SGWidpzrMs7tTrlu6Vb8XGaRGck8QSNZJJp538Wrb60Lax4fPwR64ViY468OIUTbRlGZg==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/csstype": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
-      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
-      "dev": true
+      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw=="
+    },
+    "node_modules/debug": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/decode-named-character-reference": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/decode-named-character-reference/-/decode-named-character-reference-1.2.0.tgz",
+      "integrity": "sha512-c6fcElNV6ShtZXmsgNgFFV5tVX2PaV4g+MOAkb8eXHvn6sryJBrZa9r0zV6+dtTyoCKxtDy5tyQ5ZwQuidtd+Q==",
+      "dependencies": {
+        "character-entities": "^2.0.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/dequal": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
+      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
+      "engines": {
+        "node": ">=6"
+      }
     },
     "node_modules/detect-libc": {
       "version": "2.0.4",
@@ -1005,6 +1155,18 @@
         "node": ">=8"
       }
     },
+    "node_modules/devlop": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/devlop/-/devlop-1.1.0.tgz",
+      "integrity": "sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==",
+      "dependencies": {
+        "dequal": "^2.0.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/enhanced-resolve": {
       "version": "5.18.2",
       "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.2.tgz",
@@ -1018,18 +1180,135 @@
         "node": ">=10.13.0"
       }
     },
+    "node_modules/estree-util-is-identifier-name": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/estree-util-is-identifier-name/-/estree-util-is-identifier-name-3.0.0.tgz",
+      "integrity": "sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg==",
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/extend": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
+      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
+    },
     "node_modules/graceful-fs": {
       "version": "4.2.11",
       "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
       "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
       "dev": true
     },
+    "node_modules/hast-util-to-jsx-runtime": {
+      "version": "2.3.6",
+      "resolved": "https://registry.npmjs.org/hast-util-to-jsx-runtime/-/hast-util-to-jsx-runtime-2.3.6.tgz",
+      "integrity": "sha512-zl6s8LwNyo1P9uw+XJGvZtdFF1GdAkOg8ujOw+4Pyb76874fLps4ueHXDhXWdk6YHQ6OgUtinliG7RsYvCbbBg==",
+      "dependencies": {
+        "@types/estree": "^1.0.0",
+        "@types/hast": "^3.0.0",
+        "@types/unist": "^3.0.0",
+        "comma-separated-tokens": "^2.0.0",
+        "devlop": "^1.0.0",
+        "estree-util-is-identifier-name": "^3.0.0",
+        "hast-util-whitespace": "^3.0.0",
+        "mdast-util-mdx-expression": "^2.0.0",
+        "mdast-util-mdx-jsx": "^3.0.0",
+        "mdast-util-mdxjs-esm": "^2.0.0",
+        "property-information": "^7.0.0",
+        "space-separated-tokens": "^2.0.0",
+        "style-to-js": "^1.0.0",
+        "unist-util-position": "^5.0.0",
+        "vfile-message": "^4.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/hast-util-whitespace": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/hast-util-whitespace/-/hast-util-whitespace-3.0.0.tgz",
+      "integrity": "sha512-88JUN06ipLwsnv+dVn+OIYOvAuvBMy/Qoi6O7mQHxdPXpjy+Cd6xRkWwux7DKO+4sYILtLBRIKgsdpS2gQc7qw==",
+      "dependencies": {
+        "@types/hast": "^3.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/html-url-attributes": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/html-url-attributes/-/html-url-attributes-3.0.1.tgz",
+      "integrity": "sha512-ol6UPyBWqsrO6EJySPz2O7ZSr856WDrEzM5zMqp+FJJLGMW35cLYmmZnl0vztAZxRUoNZJFTCohfjuIJ8I4QBQ==",
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/inline-style-parser": {
+      "version": "0.2.4",
+      "resolved": "https://registry.npmjs.org/inline-style-parser/-/inline-style-parser-0.2.4.tgz",
+      "integrity": "sha512-0aO8FkhNZlj/ZIbNi7Lxxr12obT7cL1moPfE4tg1LkX7LlLfC6DeX4l2ZEud1ukP9jNQyNnfzQVqwbwmAATY4Q=="
+    },
+    "node_modules/is-alphabetical": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-alphabetical/-/is-alphabetical-2.0.1.tgz",
+      "integrity": "sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/is-alphanumerical": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-alphanumerical/-/is-alphanumerical-2.0.1.tgz",
+      "integrity": "sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==",
+      "dependencies": {
+        "is-alphabetical": "^2.0.0",
+        "is-decimal": "^2.0.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/is-arrayish": {
       "version": "0.3.2",
       "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
       "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
       "optional": true
     },
+    "node_modules/is-decimal": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-decimal/-/is-decimal-2.0.1.tgz",
+      "integrity": "sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/is-hexadecimal": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-hexadecimal/-/is-hexadecimal-2.0.1.tgz",
+      "integrity": "sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/is-plain-obj": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-4.1.0.tgz",
+      "integrity": "sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/jiti": {
       "version": "2.4.2",
       "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
@@ -1267,6 +1546,15 @@
         "url": "https://opencollective.com/parcel"
       }
     },
+    "node_modules/longest-streak": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/longest-streak/-/longest-streak-3.1.0.tgz",
+      "integrity": "sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/lucide-react": {
       "version": "0.525.0",
       "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.525.0.tgz",
@@ -1284,6 +1572,572 @@
         "@jridgewell/sourcemap-codec": "^1.5.0"
       }
     },
+    "node_modules/mdast-util-from-markdown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/mdast-util-from-markdown/-/mdast-util-from-markdown-2.0.2.tgz",
+      "integrity": "sha512-uZhTV/8NBuw0WHkPTrCqDOl0zVe1BIng5ZtHoDk49ME1qqcjYmmLmOf0gELgcRMxN4w2iuIeVso5/6QymSrgmA==",
+      "dependencies": {
+        "@types/mdast": "^4.0.0",
+        "@types/unist": "^3.0.0",
+        "decode-named-character-reference": "^1.0.0",
+        "devlop": "^1.0.0",
+        "mdast-util-to-string": "^4.0.0",
+        "micromark": "^4.0.0",
+        "micromark-util-decode-numeric-character-reference": "^2.0.0",
+        "micromark-util-decode-string": "^2.0.0",
+        "micromark-util-normalize-identifier": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0",
+        "unist-util-stringify-position": "^4.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/mdast-util-mdx-expression": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/mdast-util-mdx-expression/-/mdast-util-mdx-expression-2.0.1.tgz",
+      "integrity": "sha512-J6f+9hUp+ldTZqKRSg7Vw5V6MqjATc+3E4gf3CFNcuZNWD8XdyI6zQ8GqH7f8169MM6P7hMBRDVGnn7oHB9kXQ==",
+      "dependencies": {
+        "@types/estree-jsx": "^1.0.0",
+        "@types/hast": "^3.0.0",
+        "@types/mdast": "^4.0.0",
+        "devlop": "^1.0.0",
+        "mdast-util-from-markdown": "^2.0.0",
+        "mdast-util-to-markdown": "^2.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/mdast-util-mdx-jsx": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/mdast-util-mdx-jsx/-/mdast-util-mdx-jsx-3.2.0.tgz",
+      "integrity": "sha512-lj/z8v0r6ZtsN/cGNNtemmmfoLAFZnjMbNyLzBafjzikOM+glrjNHPlf6lQDOTccj9n5b0PPihEBbhneMyGs1Q==",
+      "dependencies": {
+        "@types/estree-jsx": "^1.0.0",
+        "@types/hast": "^3.0.0",
+        "@types/mdast": "^4.0.0",
+        "@types/unist": "^3.0.0",
+        "ccount": "^2.0.0",
+        "devlop": "^1.1.0",
+        "mdast-util-from-markdown": "^2.0.0",
+        "mdast-util-to-markdown": "^2.0.0",
+        "parse-entities": "^4.0.0",
+        "stringify-entities": "^4.0.0",
+        "unist-util-stringify-position": "^4.0.0",
+        "vfile-message": "^4.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/mdast-util-mdxjs-esm": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/mdast-util-mdxjs-esm/-/mdast-util-mdxjs-esm-2.0.1.tgz",
+      "integrity": "sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg==",
+      "dependencies": {
+        "@types/estree-jsx": "^1.0.0",
+        "@types/hast": "^3.0.0",
+        "@types/mdast": "^4.0.0",
+        "devlop": "^1.0.0",
+        "mdast-util-from-markdown": "^2.0.0",
+        "mdast-util-to-markdown": "^2.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/mdast-util-phrasing": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/mdast-util-phrasing/-/mdast-util-phrasing-4.1.0.tgz",
+      "integrity": "sha512-TqICwyvJJpBwvGAMZjj4J2n0X8QWp21b9l0o7eXyVJ25YNWYbJDVIyD1bZXE6WtV6RmKJVYmQAKWa0zWOABz2w==",
+      "dependencies": {
+        "@types/mdast": "^4.0.0",
+        "unist-util-is": "^6.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/mdast-util-to-hast": {
+      "version": "13.2.0",
+      "resolved": "https://registry.npmjs.org/mdast-util-to-hast/-/mdast-util-to-hast-13.2.0.tgz",
+      "integrity": "sha512-QGYKEuUsYT9ykKBCMOEDLsU5JRObWQusAolFMeko/tYPufNkRffBAQjIE+99jbA87xv6FgmjLtwjh9wBWajwAA==",
+      "dependencies": {
+        "@types/hast": "^3.0.0",
+        "@types/mdast": "^4.0.0",
+        "@ungap/structured-clone": "^1.0.0",
+        "devlop": "^1.0.0",
+        "micromark-util-sanitize-uri": "^2.0.0",
+        "trim-lines": "^3.0.0",
+        "unist-util-position": "^5.0.0",
+        "unist-util-visit": "^5.0.0",
+        "vfile": "^6.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/mdast-util-to-markdown": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/mdast-util-to-markdown/-/mdast-util-to-markdown-2.1.2.tgz",
+      "integrity": "sha512-xj68wMTvGXVOKonmog6LwyJKrYXZPvlwabaryTjLh9LuvovB/KAH+kvi8Gjj+7rJjsFi23nkUxRQv1KqSroMqA==",
+      "dependencies": {
+        "@types/mdast": "^4.0.0",
+        "@types/unist": "^3.0.0",
+        "longest-streak": "^3.0.0",
+        "mdast-util-phrasing": "^4.0.0",
+        "mdast-util-to-string": "^4.0.0",
+        "micromark-util-classify-character": "^2.0.0",
+        "micromark-util-decode-string": "^2.0.0",
+        "unist-util-visit": "^5.0.0",
+        "zwitch": "^2.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/mdast-util-to-string": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/mdast-util-to-string/-/mdast-util-to-string-4.0.0.tgz",
+      "integrity": "sha512-0H44vDimn51F0YwvxSJSm0eCDOJTRlmN0R1yBh4HLj9wiV1Dn0QoXGbvFAWj2hSItVTlCmBF1hqKlIyUBVFLPg==",
+      "dependencies": {
+        "@types/mdast": "^4.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/micromark": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/micromark/-/micromark-4.0.2.tgz",
+      "integrity": "sha512-zpe98Q6kvavpCr1NPVSCMebCKfD7CA2NqZ+rykeNhONIJBpc1tFKt9hucLGwha3jNTNI8lHpctWJWoimVF4PfA==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "@types/debug": "^4.0.0",
+        "debug": "^4.0.0",
+        "decode-named-character-reference": "^1.0.0",
+        "devlop": "^1.0.0",
+        "micromark-core-commonmark": "^2.0.0",
+        "micromark-factory-space": "^2.0.0",
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-chunked": "^2.0.0",
+        "micromark-util-combine-extensions": "^2.0.0",
+        "micromark-util-decode-numeric-character-reference": "^2.0.0",
+        "micromark-util-encode": "^2.0.0",
+        "micromark-util-normalize-identifier": "^2.0.0",
+        "micromark-util-resolve-all": "^2.0.0",
+        "micromark-util-sanitize-uri": "^2.0.0",
+        "micromark-util-subtokenize": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-core-commonmark": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/micromark-core-commonmark/-/micromark-core-commonmark-2.0.3.tgz",
+      "integrity": "sha512-RDBrHEMSxVFLg6xvnXmb1Ayr2WzLAWjeSATAoxwKYJV94TeNavgoIdA0a9ytzDSVzBy2YKFK+emCPOEibLeCrg==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "decode-named-character-reference": "^1.0.0",
+        "devlop": "^1.0.0",
+        "micromark-factory-destination": "^2.0.0",
+        "micromark-factory-label": "^2.0.0",
+        "micromark-factory-space": "^2.0.0",
+        "micromark-factory-title": "^2.0.0",
+        "micromark-factory-whitespace": "^2.0.0",
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-chunked": "^2.0.0",
+        "micromark-util-classify-character": "^2.0.0",
+        "micromark-util-html-tag-name": "^2.0.0",
+        "micromark-util-normalize-identifier": "^2.0.0",
+        "micromark-util-resolve-all": "^2.0.0",
+        "micromark-util-subtokenize": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-factory-destination": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-factory-destination/-/micromark-factory-destination-2.0.1.tgz",
+      "integrity": "sha512-Xe6rDdJlkmbFRExpTOmRj9N3MaWmbAgdpSrBQvCFqhezUn4AHqJHbaEnfbVYYiexVSs//tqOdY/DxhjdCiJnIA==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-factory-label": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-factory-label/-/micromark-factory-label-2.0.1.tgz",
+      "integrity": "sha512-VFMekyQExqIW7xIChcXn4ok29YE3rnuyveW3wZQWWqF4Nv9Wk5rgJ99KzPvHjkmPXF93FXIbBp6YdW3t71/7Vg==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "devlop": "^1.0.0",
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-factory-space": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-factory-space/-/micromark-factory-space-2.0.1.tgz",
+      "integrity": "sha512-zRkxjtBxxLd2Sc0d+fbnEunsTj46SWXgXciZmHq0kDYGnck/ZSGj9/wULTV95uoeYiK5hRXP2mJ98Uo4cq/LQg==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-factory-title": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-factory-title/-/micromark-factory-title-2.0.1.tgz",
+      "integrity": "sha512-5bZ+3CjhAd9eChYTHsjy6TGxpOFSKgKKJPJxr293jTbfry2KDoWkhBb6TcPVB4NmzaPhMs1Frm9AZH7OD4Cjzw==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-factory-space": "^2.0.0",
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-factory-whitespace": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-factory-whitespace/-/micromark-factory-whitespace-2.0.1.tgz",
+      "integrity": "sha512-Ob0nuZ3PKt/n0hORHyvoD9uZhr+Za8sFoP+OnMcnWK5lngSzALgQYKMr9RJVOWLqQYuyn6ulqGWSXdwf6F80lQ==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-factory-space": "^2.0.0",
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-character": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-character/-/micromark-util-character-2.1.1.tgz",
+      "integrity": "sha512-wv8tdUTJ3thSFFFJKtpYKOYiGP2+v96Hvk4Tu8KpCAsTMs6yi+nVmGh1syvSCsaxz45J6Jbw+9DD6g97+NV67Q==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-chunked": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-chunked/-/micromark-util-chunked-2.0.1.tgz",
+      "integrity": "sha512-QUNFEOPELfmvv+4xiNg2sRYeS/P84pTW0TCgP5zc9FpXetHY0ab7SxKyAQCNCc1eK0459uoLI1y5oO5Vc1dbhA==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-symbol": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-classify-character": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-classify-character/-/micromark-util-classify-character-2.0.1.tgz",
+      "integrity": "sha512-K0kHzM6afW/MbeWYWLjoHQv1sgg2Q9EccHEDzSkxiP/EaagNzCm7T/WMKZ3rjMbvIpvBiZgwR3dKMygtA4mG1Q==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-combine-extensions": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-combine-extensions/-/micromark-util-combine-extensions-2.0.1.tgz",
+      "integrity": "sha512-OnAnH8Ujmy59JcyZw8JSbK9cGpdVY44NKgSM7E9Eh7DiLS2E9RNQf0dONaGDzEG9yjEl5hcqeIsj4hfRkLH/Bg==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-chunked": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-decode-numeric-character-reference": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/micromark-util-decode-numeric-character-reference/-/micromark-util-decode-numeric-character-reference-2.0.2.tgz",
+      "integrity": "sha512-ccUbYk6CwVdkmCQMyr64dXz42EfHGkPQlBj5p7YVGzq8I7CtjXZJrubAYezf7Rp+bjPseiROqe7G6foFd+lEuw==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-symbol": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-decode-string": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-decode-string/-/micromark-util-decode-string-2.0.1.tgz",
+      "integrity": "sha512-nDV/77Fj6eH1ynwscYTOsbK7rR//Uj0bZXBwJZRfaLEJ1iGBR6kIfNmlNqaqJf649EP0F3NWNdeJi03elllNUQ==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "decode-named-character-reference": "^1.0.0",
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-decode-numeric-character-reference": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-encode": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-encode/-/micromark-util-encode-2.0.1.tgz",
+      "integrity": "sha512-c3cVx2y4KqUnwopcO9b/SCdo2O67LwJJ/UyqGfbigahfegL9myoEFoDYZgkT7f36T0bLrM9hZTAaAyH+PCAXjw==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ]
+    },
+    "node_modules/micromark-util-html-tag-name": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-html-tag-name/-/micromark-util-html-tag-name-2.0.1.tgz",
+      "integrity": "sha512-2cNEiYDhCWKI+Gs9T0Tiysk136SnR13hhO8yW6BGNyhOC4qYFnwF1nKfD3HFAIXA5c45RrIG1ub11GiXeYd1xA==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ]
+    },
+    "node_modules/micromark-util-normalize-identifier": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-normalize-identifier/-/micromark-util-normalize-identifier-2.0.1.tgz",
+      "integrity": "sha512-sxPqmo70LyARJs0w2UclACPUUEqltCkJ6PhKdMIDuJ3gSf/Q+/GIe3WKl0Ijb/GyH9lOpUkRAO2wp0GVkLvS9Q==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-symbol": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-resolve-all": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-resolve-all/-/micromark-util-resolve-all-2.0.1.tgz",
+      "integrity": "sha512-VdQyxFWFT2/FGJgwQnJYbe1jjQoNTS4RjglmSjTUlpUMa95Htx9NHeYW4rGDJzbjvCsl9eLjMQwGeElsqmzcHg==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-sanitize-uri": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-sanitize-uri/-/micromark-util-sanitize-uri-2.0.1.tgz",
+      "integrity": "sha512-9N9IomZ/YuGGZZmQec1MbgxtlgougxTodVwDzzEouPKo3qFWvymFHWcnDi2vzV1ff6kas9ucW+o3yzJK9YB1AQ==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "micromark-util-character": "^2.0.0",
+        "micromark-util-encode": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-subtokenize": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/micromark-util-subtokenize/-/micromark-util-subtokenize-2.1.0.tgz",
+      "integrity": "sha512-XQLu552iSctvnEcgXw6+Sx75GflAPNED1qx7eBJ+wydBb2KCbRZe+NwvIEEMM83uml1+2WSXpBAcp9IUCgCYWA==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ],
+      "dependencies": {
+        "devlop": "^1.0.0",
+        "micromark-util-chunked": "^2.0.0",
+        "micromark-util-symbol": "^2.0.0",
+        "micromark-util-types": "^2.0.0"
+      }
+    },
+    "node_modules/micromark-util-symbol": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/micromark-util-symbol/-/micromark-util-symbol-2.0.1.tgz",
+      "integrity": "sha512-vs5t8Apaud9N28kgCrRUdEed4UJ+wWNvicHLPxCa9ENlYuAY31M0ETy5y1vA33YoNPDFTghEbnh6efaE8h4x0Q==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ]
+    },
+    "node_modules/micromark-util-types": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/micromark-util-types/-/micromark-util-types-2.0.2.tgz",
+      "integrity": "sha512-Yw0ECSpJoViF1qTU4DC6NwtC4aWGt1EkzaQB8KPPyCRR8z9TWeV0HbEFGTO+ZY1wB22zmxnJqhPyTpOVCpeHTA==",
+      "funding": [
+        {
+          "type": "GitHub Sponsors",
+          "url": "https://github.com/sponsors/unifiedjs"
+        },
+        {
+          "type": "OpenCollective",
+          "url": "https://opencollective.com/unified"
+        }
+      ]
+    },
     "node_modules/minipass": {
       "version": "7.1.2",
       "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
@@ -1320,6 +2174,11 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+    },
     "node_modules/nanoid": {
       "version": "3.3.11",
       "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
@@ -1417,6 +2276,29 @@
         "node": "^10 || ^12 || >=14"
       }
     },
+    "node_modules/parse-entities": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/parse-entities/-/parse-entities-4.0.2.tgz",
+      "integrity": "sha512-GG2AQYWoLgL877gQIKeRPGO1xF9+eG1ujIb5soS5gPvLQ1y2o8FL90w2QWNdf9I361Mpp7726c+lj3U0qK1uGw==",
+      "dependencies": {
+        "@types/unist": "^2.0.0",
+        "character-entities-legacy": "^3.0.0",
+        "character-reference-invalid": "^2.0.0",
+        "decode-named-character-reference": "^1.0.0",
+        "is-alphanumerical": "^2.0.0",
+        "is-decimal": "^2.0.0",
+        "is-hexadecimal": "^2.0.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/parse-entities/node_modules/@types/unist": {
+      "version": "2.0.11",
+      "resolved": "https://registry.npmjs.org/@types/unist/-/unist-2.0.11.tgz",
+      "integrity": "sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA=="
+    },
     "node_modules/picocolors": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
@@ -1450,6 +2332,15 @@
         "node": "^10 || ^12 || >=14"
       }
     },
+    "node_modules/property-information": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/property-information/-/property-information-7.1.0.tgz",
+      "integrity": "sha512-TwEZ+X+yCJmYfL7TPUOcvBZ4QfoT5YenQiJuX//0th53DE6w0xxLEtfK3iyryQFddXuvkIk51EEgrJQ0WJkOmQ==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/react": {
       "version": "19.1.0",
       "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
@@ -1469,6 +2360,63 @@
         "react": "^19.1.0"
       }
     },
+    "node_modules/react-markdown": {
+      "version": "10.1.0",
+      "resolved": "https://registry.npmjs.org/react-markdown/-/react-markdown-10.1.0.tgz",
+      "integrity": "sha512-qKxVopLT/TyA6BX3Ue5NwabOsAzm0Q7kAPwq6L+wWDwisYs7R8vZ0nRXqq6rkueboxpkjvLGU9fWifiX/ZZFxQ==",
+      "dependencies": {
+        "@types/hast": "^3.0.0",
+        "@types/mdast": "^4.0.0",
+        "devlop": "^1.0.0",
+        "hast-util-to-jsx-runtime": "^2.0.0",
+        "html-url-attributes": "^3.0.0",
+        "mdast-util-to-hast": "^13.0.0",
+        "remark-parse": "^11.0.0",
+        "remark-rehype": "^11.0.0",
+        "unified": "^11.0.0",
+        "unist-util-visit": "^5.0.0",
+        "vfile": "^6.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      },
+      "peerDependencies": {
+        "@types/react": ">=18",
+        "react": ">=18"
+      }
+    },
+    "node_modules/remark-parse": {
+      "version": "11.0.0",
+      "resolved": "https://registry.npmjs.org/remark-parse/-/remark-parse-11.0.0.tgz",
+      "integrity": "sha512-FCxlKLNGknS5ba/1lmpYijMUzX2esxW5xQqjWxw2eHFfS2MSdaHVINFmhjo+qN1WhZhNimq0dZATN9pH0IDrpA==",
+      "dependencies": {
+        "@types/mdast": "^4.0.0",
+        "mdast-util-from-markdown": "^2.0.0",
+        "micromark-util-types": "^2.0.0",
+        "unified": "^11.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/remark-rehype": {
+      "version": "11.1.2",
+      "resolved": "https://registry.npmjs.org/remark-rehype/-/remark-rehype-11.1.2.tgz",
+      "integrity": "sha512-Dh7l57ianaEoIpzbp0PC9UKAdCSVklD8E5Rpw7ETfbTl3FqcOOgq5q2LVDhgGCkaBv7p24JXikPdvhhmHvKMsw==",
+      "dependencies": {
+        "@types/hast": "^3.0.0",
+        "@types/mdast": "^4.0.0",
+        "mdast-util-to-hast": "^13.0.0",
+        "unified": "^11.0.0",
+        "vfile": "^6.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
     "node_modules/scheduler": {
       "version": "0.26.0",
       "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
@@ -1553,6 +2501,15 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/space-separated-tokens": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/space-separated-tokens/-/space-separated-tokens-2.0.2.tgz",
+      "integrity": "sha512-PEGlAwrG8yXGXRjW32fGbg66JAlOAwbObuqVoJpv/mRgoWDQfgH1wDPvtzWyUSNAXBGSk8h755YDbbcEy3SH2Q==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/streamsearch": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
@@ -1561,6 +2518,35 @@
         "node": ">=10.0.0"
       }
     },
+    "node_modules/stringify-entities": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/stringify-entities/-/stringify-entities-4.0.4.tgz",
+      "integrity": "sha512-IwfBptatlO+QCJUo19AqvrPNqlVMpW9YEL2LIVY+Rpv2qsjCGxaDLNRgeGsQWJhfItebuJhsGSLjaBbNSQ+ieg==",
+      "dependencies": {
+        "character-entities-html4": "^2.0.0",
+        "character-entities-legacy": "^3.0.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/style-to-js": {
+      "version": "1.1.17",
+      "resolved": "https://registry.npmjs.org/style-to-js/-/style-to-js-1.1.17.tgz",
+      "integrity": "sha512-xQcBGDxJb6jjFCTzvQtfiPn6YvvP2O8U1MDIPNfJQlWMYfktPy+iGsHE7cssjs7y84d9fQaK4UF3RIJaAHSoYA==",
+      "dependencies": {
+        "style-to-object": "1.0.9"
+      }
+    },
+    "node_modules/style-to-object": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/style-to-object/-/style-to-object-1.0.9.tgz",
+      "integrity": "sha512-G4qppLgKu/k6FwRpHiGiKPaPTFcG3g4wNVX/Qsfu+RqQM30E7Tyu/TEgxcL9PNLF5pdRLwQdE3YKKf+KF2Dzlw==",
+      "dependencies": {
+        "inline-style-parser": "0.2.4"
+      }
+    },
     "node_modules/styled-jsx": {
       "version": "5.1.6",
       "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
@@ -1615,6 +2601,24 @@
         "node": ">=18"
       }
     },
+    "node_modules/trim-lines": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/trim-lines/-/trim-lines-3.0.1.tgz",
+      "integrity": "sha512-kRj8B+YHZCc9kQYdWfJB2/oUl9rA99qbowYYBtr4ui4mZyAQ2JpvVBd/6U2YloATfqBhBTSMhTpgBHtU0Mf3Rg==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/trough": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/trough/-/trough-2.2.0.tgz",
+      "integrity": "sha512-tmMpK00BjZiUyVyvrBK7knerNgmgvcV/KLVyuma/SC+TQN167GrMRciANTz09+k3zW8L8t60jWO1GpfkZdjTaw==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
     "node_modules/tslib": {
       "version": "2.8.1",
       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
@@ -1639,6 +2643,113 @@
       "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
       "dev": true
     },
+    "node_modules/unified": {
+      "version": "11.0.5",
+      "resolved": "https://registry.npmjs.org/unified/-/unified-11.0.5.tgz",
+      "integrity": "sha512-xKvGhPWw3k84Qjh8bI3ZeJjqnyadK+GEFtazSfZv/rKeTkTjOJho6mFqh2SM96iIcZokxiOpg78GazTSg8+KHA==",
+      "dependencies": {
+        "@types/unist": "^3.0.0",
+        "bail": "^2.0.0",
+        "devlop": "^1.0.0",
+        "extend": "^3.0.0",
+        "is-plain-obj": "^4.0.0",
+        "trough": "^2.0.0",
+        "vfile": "^6.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/unist-util-is": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-6.0.0.tgz",
+      "integrity": "sha512-2qCTHimwdxLfz+YzdGfkqNlH0tLi9xjTnHddPmJwtIG9MGsdbutfTc4P+haPD7l7Cjxf/WZj+we5qfVPvvxfYw==",
+      "dependencies": {
+        "@types/unist": "^3.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/unist-util-position": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/unist-util-position/-/unist-util-position-5.0.0.tgz",
+      "integrity": "sha512-fucsC7HjXvkB5R3kTCO7kUjRdrS0BJt3M/FPxmHMBOm8JQi2BsHAHFsy27E0EolP8rp0NzXsJ+jNPyDWvOJZPA==",
+      "dependencies": {
+        "@types/unist": "^3.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/unist-util-stringify-position": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/unist-util-stringify-position/-/unist-util-stringify-position-4.0.0.tgz",
+      "integrity": "sha512-0ASV06AAoKCDkS2+xw5RXJywruurpbC4JZSm7nr7MOt1ojAzvyyaO+UxZf18j8FCF6kmzCZKcAgN/yu2gm2XgQ==",
+      "dependencies": {
+        "@types/unist": "^3.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/unist-util-visit": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-5.0.0.tgz",
+      "integrity": "sha512-MR04uvD+07cwl/yhVuVWAtw+3GOR/knlL55Nd/wAdblk27GCVt3lqpTivy/tkJcZoNPzTwS1Y+KMojlLDhoTzg==",
+      "dependencies": {
+        "@types/unist": "^3.0.0",
+        "unist-util-is": "^6.0.0",
+        "unist-util-visit-parents": "^6.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/unist-util-visit-parents": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-6.0.1.tgz",
+      "integrity": "sha512-L/PqWzfTP9lzzEa6CKs0k2nARxTdZduw3zyh8d2NVBnsyvHjSX4TWse388YrrQKbvI8w20fGjGlhgT96WwKykw==",
+      "dependencies": {
+        "@types/unist": "^3.0.0",
+        "unist-util-is": "^6.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/vfile": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/vfile/-/vfile-6.0.3.tgz",
+      "integrity": "sha512-KzIbH/9tXat2u30jf+smMwFCsno4wHVdNmzFyL+T/L3UGqqk6JKfVqOFOZEpZSHADH1k40ab6NUIXZq422ov3Q==",
+      "dependencies": {
+        "@types/unist": "^3.0.0",
+        "vfile-message": "^4.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
+    "node_modules/vfile-message": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/vfile-message/-/vfile-message-4.0.2.tgz",
+      "integrity": "sha512-jRDZ1IMLttGj41KcZvlrYAaI3CfqpLpfpf+Mfig13viT6NKvRzWZ+lXz0Y5D60w6uJIBAOGq9mSHf0gktF0duw==",
+      "dependencies": {
+        "@types/unist": "^3.0.0",
+        "unist-util-stringify-position": "^4.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/unified"
+      }
+    },
     "node_modules/yallist": {
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
@@ -1647,6 +2758,15 @@
       "engines": {
         "node": ">=18"
       }
+    },
+    "node_modules/zwitch": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/zwitch/-/zwitch-2.0.4.tgz",
+      "integrity": "sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
     }
   }
 }
diff --git a/package.json b/package.json
index 8e14abc..ece0ce0 100644
--- a/package.json
+++ b/package.json
@@ -13,6 +13,7 @@
     "next": "15.3.4",
     "react": "^19.0.0",
     "react-dom": "^19.0.0",
+    "react-markdown": "^10.1.0",
     "sonner": "^2.0.5"
   },
   "devDependencies": {
